.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_plotting_in_3D.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_plotting_in_3D.py:


Plotting in 3D
==============


.. code-block:: default


    import numpy as np

    from poliastro.examples import *
    from poliastro.plotting import *

    import plotly








We start by plotting the Churi's orbit without the need of creating
an instance of OrbitPlotter3D()



.. code-block:: default


    fig = churi.plot(interactive=True, use_3d=True)
    plotly.io.show(fig)




.. raw:: html
    :file: images/sphx_glr_plot_plotting_in_3D_001.html





However, if we want to add more orbits to the frame, then we need
an instance of the three-dimensional plotter utility



.. code-block:: default


    frame = OrbitPlotter3D()
    frame.plot(churi)
    fig = frame.plot(Orbit.from_body_ephem(Earth))
    plotly.io.show(fig)





.. raw:: html
    :file: images/sphx_glr_plot_plotting_in_3D_002.html





Let us now plot for a Molniya orbit!



.. code-block:: default


    frame = OrbitPlotter3D()
    frame.plot(molniya)
    plotly.io.show(fig)





.. raw:: html
    :file: images/sphx_glr_plot_plotting_in_3D_003.html





What about adding the ISS to better compare both orbits?



.. code-block:: default


    frame = OrbitPlotter3D()

    frame.plot(molniya)
    fig = frame.plot(iss)
    plotly.io.show(fig)





.. raw:: html
    :file: images/sphx_glr_plot_plotting_in_3D_004.html





We will now plot Eros' and Earth's orbit 



.. code-block:: default


    eros = Orbit.from_sbdb("eros")

    frame = OrbitPlotter3D()
    frame.plot(Orbit.from_body_ephem(Earth), label=Earth)
    fig = frame.plot(eros, label="eros")
    plotly.io.show(fig)





.. raw:: html
    :file: images/sphx_glr_plot_plotting_in_3D_005.html





We can also solve for a range of positions and velocities for the
Earth at an specific period of time. When using the astropy
get_body_barycentric_posvel() we need to set the attractor of the frame
figure. 



.. code-block:: default


    from astropy.coordinates import get_body_barycentric_posvel
    from poliastro.util import time_range

    date_launch = time.Time("2011-11-26 15:02", scale="utc")
    date_arrival = time.Time("2012-08-06 05:17", scale="utc")

    rr_earth, _ = get_body_barycentric_posvel(
        "earth", time_range(date_launch, end=date_arrival, periods=50)
    )

    frame = OrbitPlotter3D()
    frame.set_attractor(Sun)
    frame.plot(Orbit.from_body_ephem(Earth), label=Earth)
    fig = frame.plot_trajectory(rr_earth, label=Earth)
    plotly.io.show(fig)





.. raw:: html
    :file: images/sphx_glr_plot_plotting_in_3D_006.html





However, if we first plot Eros, since an attractor has been set
due to its Orbit class type, it is not necessary to specify the
attractor of the plot anymore.


.. code-block:: default


    frame = OrbitPlotter3D()
    frame.plot(eros, label="eros")
    fig = frame.plot_trajectory(rr_earth, label=Earth)
    plotly.io.show(fig)





.. raw:: html
    :file: images/sphx_glr_plot_plotting_in_3D_007.html






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.287 seconds)


.. _sphx_glr_download_auto_examples_plot_plotting_in_3D.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_plotting_in_3D.py <plot_plotting_in_3D.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_plotting_in_3D.ipynb <plot_plotting_in_3D.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
